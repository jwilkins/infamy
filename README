Infamy - Simple Reputation Management

Infamy uses memcache to provide a super simple, reasonably fast reputation
management/abuse detection system.

Infamy can run without a database store (which is enough for detecting
certain types of abuse), but using a DB for long term reputation is
recommended.

Infamy doesn't authenticate connections by default (but it does bind only
to localhost), so don't expose it to the world, otherwise attackers can 
just 'fix' their reputations.

Requirements:
-------------
- Memcached
- Ruby (1.9 tested)
- Gems
  - Datamapper (dm-core)
    - Data store for Datamapper (do_sqlite3/do_mysql/do_postgres)
  - Starling (starling-starling)
  - Memcached (memcached)
  - Thin (thin)

Running:
--------
- Start memcached
  - tune per http://mituzas.lt/2008/12/25/memcached-for-small-objects/
- ruby fe_thin.rb
If you also want a database backing up memcache:
- Start starling (starling -q /tmp/starling -P /tmp/starling.pid)
- ruby be_audit.rb

Using:
------
Infamy presents a simple REST API.
To get a user's reputation score:
  http://localhost:4444/score/1:111
To add to a user's score (can be positive or negative):
  http://localhost:4444/add/1:111/-10
To add set a user's score to an arbitrary value
  http://localhost:4444/set/1:111/0

If you set an 'X-Originating-IP' header when calling add, the amount
will also be added to the IP specified in the header.
eg: X-Originating-IP: 10.1.1.1

Performance:
------------
- Server and benchmark both running on a MacBook Pro 2.53 GHz Core 2 Duo
  - No backend, just memcache
    - ab -c 50 -n 10000 http://127.0.0.1:4444/score/1:111
    - 1726 r/s

Notes:
- Info is a hash which contains score and update time
- Uses starling to add updates to a queue
- Keeps track of update time (updated_at) and time written to persistent
  storage (stored_at) in memcache record

